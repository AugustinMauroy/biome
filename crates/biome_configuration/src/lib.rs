//! This module contains the configuration of `biome.json`
//!
//! The configuration is divided by "tool", and then it's possible to further customise it
//! by language. The language might further options divided by tool.
pub mod bool;
pub mod css;
pub mod diagnostics;
pub mod editorconfig;
pub mod file_size;
pub mod formatter;
pub mod generated;
pub mod graphql;
pub mod javascript;
pub mod json;
pub mod linter;
pub mod organize_imports;
mod overrides;
pub mod vcs;

pub use crate::diagnostics::BiomeDiagnostic;
pub use crate::diagnostics::CantLoadExtendFile;
pub use crate::generated::push_to_analyzer_rules;
use crate::organize_imports::{organize_imports, OrganizeImports};
use crate::vcs::{vcs_configuration, VcsConfiguration};
use biome_deserialize::{Deserialized, StringSet};
use biome_deserialize_macros::{Deserializable, Merge};
use bool::Bool;
use bpaf::Bpaf;
pub use css::{
    css_configuration, CssConfiguration, CssFormatterConfiguration, CssLinterConfiguration,
    CssParserConfiguration,
};
pub use file_size::FileSize;
pub use formatter::{formatter_configuration, FormatterConfiguration, PlainIndentStyle};
pub use graphql::{
    graphql_configuration, GraphqlConfiguration, GraphqlFormatterConfiguration,
    GraphqlLinterConfiguration,
};
pub use javascript::{
    js_configuration, JsConfiguration, JsFormatterConfiguration, JsLinterConfiguration,
    JsParserConfiguration,
};
pub use json::{
    json_configuration, JsonConfiguration, JsonFormatterConfiguration, JsonLinterConfiguration,
    JsonParserConfiguration,
};
pub use linter::{
    linter_configuration, LinterConfiguration, RuleConfiguration, RuleFixConfiguration,
    RulePlainConfiguration, RuleWithFixOptions, RuleWithOptions, Rules,
};
pub use overrides::{
    OverrideFormatterConfiguration, OverrideLinterConfiguration,
    OverrideOrganizeImportsConfiguration, OverridePattern, Overrides,
};
use serde::{Deserialize, Serialize};
use std::fmt::Debug;
use std::path::PathBuf;

/// The configuration that is contained inside the file `biome.json`
#[derive(
    Bpaf, Clone, Debug, Default, Deserializable, Deserialize, Eq, Merge, PartialEq, Serialize,
)]
#[cfg_attr(feature = "schema", derive(schemars::JsonSchema))]
#[serde(deny_unknown_fields, rename_all = "camelCase")]
pub struct Configuration {
    /// A field for the [JSON schema](https://json-schema.org/) specification
    #[serde(rename = "$schema")]
    #[bpaf(hide)]
    pub schema: Option<String>,

    /// The configuration of the VCS integration
    #[bpaf(external(vcs_configuration), optional, hide_usage)]
    pub vcs: Option<VcsConfiguration>,

    /// The configuration of the filesystem
    #[bpaf(external(files_configuration), optional, hide_usage)]
    pub files: Option<FilesConfiguration>,

    /// The configuration of the formatter
    #[bpaf(external(formatter_configuration), optional)]
    pub formatter: Option<FormatterConfiguration>,

    /// The configuration of the import sorting
    #[bpaf(external(organize_imports), optional)]
    pub organize_imports: Option<OrganizeImports>,

    /// The configuration for the linter
    #[bpaf(external(linter_configuration), optional)]
    pub linter: Option<LinterConfiguration>,

    /// Specific configuration for the JavaScript language
    #[bpaf(external(js_configuration), optional)]
    pub javascript: Option<JsConfiguration>,

    /// Specific configuration for the Json language
    #[bpaf(external(json_configuration), optional)]
    pub json: Option<JsonConfiguration>,

    /// Specific configuration for the Css language
    #[bpaf(external(css_configuration), optional)]
    pub css: Option<CssConfiguration>,

    /// Specific configuration for the GraphQL language
    #[bpaf(external(graphql_configuration), optional)]
    pub graphql: Option<GraphqlConfiguration>,

    /// A list of paths to other JSON files, used to extends the current configuration.
    #[bpaf(hide)]
    pub extends: Option<StringSet>,

    /// A list of granular patterns that should be applied only to a sub set of files
    #[bpaf(hide)]
    pub overrides: Option<Overrides>,
}

impl Configuration {
    /// Returns the initial configuration as generated by `biome init`.
    pub fn init() -> Self {
        Self {
            organize_imports: Some(OrganizeImports {
                enabled: Some(true.into()),
                ..Default::default()
            }),
            linter: Some(LinterConfiguration {
                enabled: Some(true.into()),
                rules: Some(Rules {
                    recommended: Some(true),
                    ..Default::default()
                }),
                ..Default::default()
            }),
            ..Default::default()
        }
    }

    pub fn is_formatter_enabled(&self) -> bool {
        self.formatter
            .as_ref()
            .and_then(|formatter| formatter.enabled)
            .unwrap_or_default()
            .into()
    }

    pub fn get_formatter_configuration(&self) -> FormatterConfiguration {
        self.formatter.clone().unwrap_or_default()
    }

    pub fn is_linter_enabled(&self) -> bool {
        self.linter
            .as_ref()
            .and_then(|linter| linter.enabled)
            .unwrap_or_default()
            .into()
    }

    pub fn get_linter_rules(&self) -> Rules {
        self.linter
            .as_ref()
            .and_then(|linter| linter.rules.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn is_organize_imports_enabled(&self) -> bool {
        self.organize_imports
            .as_ref()
            .and_then(|organize_imports| organize_imports.enabled)
            .unwrap_or_default()
            .into()
    }

    pub fn is_vcs_enabled(&self) -> bool {
        self.vcs
            .as_ref()
            .and_then(|vcs| vcs.enabled)
            .unwrap_or_default()
            .into()
    }

    pub fn get_javascript_parser_configuration(&self) -> JsParserConfiguration {
        self.javascript
            .as_ref()
            .and_then(|lang| lang.parser.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_javascript_formatter_configuration(&self) -> JsFormatterConfiguration {
        self.javascript
            .as_ref()
            .and_then(|lang| lang.formatter.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_javascript_linter_configuration(&self) -> JsLinterConfiguration {
        self.javascript
            .as_ref()
            .and_then(|lang| lang.linter.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_json_parser_configuration(&self) -> JsonParserConfiguration {
        self.json
            .as_ref()
            .and_then(|lang| lang.parser.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_json_formatter_configuration(&self) -> JsonFormatterConfiguration {
        self.json
            .as_ref()
            .and_then(|lang| lang.formatter.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_json_linter_configuration(&self) -> JsonLinterConfiguration {
        self.json
            .as_ref()
            .and_then(|lang| lang.linter.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_css_parser_configuration(&self) -> CssParserConfiguration {
        self.css
            .as_ref()
            .and_then(|lang| lang.parser.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_css_formatter_configuration(&self) -> CssFormatterConfiguration {
        self.css
            .as_ref()
            .and_then(|lang| lang.formatter.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_css_linter_configuration(&self) -> CssLinterConfiguration {
        self.css
            .as_ref()
            .and_then(|lang| lang.linter.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_graphql_formatter_configuration(&self) -> GraphqlFormatterConfiguration {
        self.graphql
            .as_ref()
            .and_then(|lang| lang.formatter.as_ref())
            .cloned()
            .unwrap_or_default()
    }

    pub fn get_graphql_linter_configuration(&self) -> GraphqlLinterConfiguration {
        self.graphql
            .as_ref()
            .and_then(|lang| lang.linter.as_ref())
            .cloned()
            .unwrap_or_default()
    }
}

pub type IgnoreUnknownEnabled = Bool<false>;

/// The configuration of the filesystem
#[derive(
    Bpaf, Clone, Debug, Default, Deserializable, Deserialize, Eq, Merge, PartialEq, Serialize,
)]
#[cfg_attr(feature = "schema", derive(schemars::JsonSchema))]
#[serde(rename_all = "camelCase", default, deny_unknown_fields)]
pub struct FilesConfiguration {
    /// The maximum allowed size for source code files in bytes. Files above
    /// this limit will be ignored for performance reasons. Defaults to 1 MiB
    #[bpaf(long("files-max-size"), argument("NUMBER"))]
    pub max_size: Option<FileSize>,

    /// A list of Unix shell style patterns. Biome will ignore files/folders that will
    /// match these patterns.
    #[bpaf(hide)]
    pub ignore: Option<StringSet>,

    /// A list of Unix shell style patterns. Biome will handle only those files/folders that will
    /// match these patterns.
    #[bpaf(hide)]
    pub include: Option<StringSet>,

    /// Tells Biome to not emit diagnostics when handling files that doesn't know
    #[bpaf(long("files-ignore-unknown"), argument("true|false"))]
    pub ignore_unknown: Option<IgnoreUnknownEnabled>,
}

pub struct ConfigurationPayload {
    /// The result of the deserialization
    pub deserialized: Deserialized<Configuration>,
    /// The path of where the `biome.json` or `biome.jsonc` file was found. This contains the file name.
    pub configuration_file_path: PathBuf,
    /// The base path where the external configuration in a package should be resolved from
    pub external_resolution_base_path: PathBuf,
}

#[derive(Debug, Default, PartialEq, Clone)]
pub enum ConfigurationPathHint {
    /// The default mode, not having a configuration file is not an error.
    /// The path will be filled with the working directory if it is not filled at the time of usage.
    #[default]
    None,

    /// Very similar to [ConfigurationPathHint::None]. However, the path provided by this variant
    /// will be used as **working directory**, which means that all globs defined in the configuration
    /// will use **this path** as base path.
    FromWorkspace(PathBuf),

    /// The configuration path provided by the LSP, not having a configuration file is not an error.
    /// The path will always be a directory path.
    FromLsp(PathBuf),
    /// The configuration path provided by the user, not having a configuration file is an error.
    /// The path can either be a directory path or a file path.
    /// Throws any kind of I/O errors.
    FromUser(PathBuf),
}

impl ConfigurationPathHint {
    pub const fn is_from_user(&self) -> bool {
        matches!(self, Self::FromUser(_))
    }
    pub const fn is_from_lsp(&self) -> bool {
        matches!(self, Self::FromLsp(_))
    }
}

#[cfg(test)]
mod test {
    use oxc_resolver::{FileMetadata, ResolveOptions, ResolverGeneric};
    use std::env;
    use std::path::{Path, PathBuf};

    #[test]
    fn resolver_test() {
        #[derive(Debug, Default)]
        struct Test;

        impl oxc_resolver::FileSystem for Test {
            fn read_to_string(&self, _path: &Path) -> std::io::Result<String> {
                Ok(String::from(
                    r#"{ "name": "example", "exports": { "./biome": "./biome.json" }}"#,
                ))
            }

            fn metadata(&self, _path: &Path) -> std::io::Result<FileMetadata> {
                Ok(FileMetadata::new(true, false, false))
            }

            fn symlink_metadata(&self, _path: &Path) -> std::io::Result<FileMetadata> {
                Ok(FileMetadata::new(true, false, false))
            }

            fn canonicalize(&self, _path: &Path) -> std::io::Result<PathBuf> {
                env::current_dir().unwrap().canonicalize()
            }
        }

        let resolver = ResolverGeneric::new_with_file_system(
            Test {},
            ResolveOptions {
                condition_names: vec!["node".to_string(), "import".to_string()],
                extensions: vec![".json".to_string()],
                ..ResolveOptions::default()
            },
        );

        let result = resolver
            .resolve(
                env::current_dir()
                    .unwrap()
                    .canonicalize()
                    .unwrap()
                    .display()
                    .to_string(),
                "example/biome",
            )
            .unwrap();

        dbg!(&result);
    }
}
